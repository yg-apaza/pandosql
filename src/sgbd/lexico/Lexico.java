/* The following code was generated by JFlex 1.4.3 on 13/10/15 06:03 PM */

package sgbd.lexico;

import java_cup.runtime.*;
import sgbd.semantico.Nodo;
import sgbd.Mistake;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/10/15 06:03 PM from the specification file
 * <tt>/mnt/46DCC7E2DCC7CA7F/UNSA/08 SEMESTRE/01 Base de Datos 2/Proyecto/Codigo Fuente/pandosql/src/sgbd/lexico/Lexer.flex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\6\2\0\1\3\22\0\1\3\1\0\1\64\5\0"+
    "\1\45\1\46\1\5\1\0\1\47\1\0\1\65\1\4\12\2\1\0"+
    "\1\51\1\0\1\50\3\0\1\36\1\26\1\37\1\23\1\12\1\60"+
    "\1\13\1\40\1\7\2\1\1\27\1\61\1\10\1\24\1\54\1\1"+
    "\1\14\1\52\1\11\1\25\1\35\1\56\3\1\4\0\1\66\1\0"+
    "\1\42\1\33\1\43\1\30\1\20\1\62\1\21\1\44\1\15\2\1"+
    "\1\34\1\63\1\16\1\31\1\55\1\1\1\22\1\53\1\17\1\32"+
    "\1\41\1\57\3\1\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\22\2"+
    "\1\6\1\7\1\10\1\11\1\12\6\2\1\1\1\0"+
    "\1\4\1\0\11\2\1\13\31\2\1\0\1\14\1\15"+
    "\1\0\13\2\1\16\12\2\1\17\4\2\1\20\12\2"+
    "\1\21\4\2\1\22\2\2\1\23\20\2\1\24\3\2"+
    "\1\25\3\2\1\26\2\2\1\26\22\2\1\27\1\30"+
    "\1\2\1\31\1\32\1\2\1\33\1\34\1\2\1\35"+
    "\4\2\1\36\1\37\1\2\1\40\1\41\1\2\1\42"+
    "\1\2\1\43\2\44\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\67\0\334\0\67\0\u0113"+
    "\0\u014a\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb"+
    "\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483"+
    "\0\u04ba\0\67\0\67\0\67\0\67\0\67\0\u04f1\0\u0528"+
    "\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0"+
    "\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898"+
    "\0\u08cf\0\156\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19"+
    "\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1"+
    "\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89"+
    "\0\u0dc0\0\u0df7\0\u0e2e\0\u063b\0\67\0\u0672\0\u0e65\0\u0e9c"+
    "\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054"+
    "\0\u108b\0\u10c2\0\156\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5"+
    "\0\u120c\0\u1243\0\u127a\0\u12b1\0\u12e8\0\156\0\u131f\0\u1356"+
    "\0\u138d\0\u13c4\0\156\0\u13fb\0\u1432\0\u1469\0\u14a0\0\u14d7"+
    "\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\156\0\u1621\0\u1658"+
    "\0\u168f\0\u16c6\0\156\0\u16fd\0\u1734\0\156\0\u176b\0\u17a2"+
    "\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a"+
    "\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\156\0\u1adb"+
    "\0\u1b12\0\u1b49\0\156\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c"+
    "\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14"+
    "\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc"+
    "\0\u2003\0\u203a\0\u2071\0\u20a8\0\156\0\156\0\u20df\0\156"+
    "\0\156\0\u2116\0\156\0\156\0\u214d\0\156\0\u2184\0\u21bb"+
    "\0\u21f2\0\u2229\0\156\0\156\0\u2260\0\156\0\156\0\u2297"+
    "\0\156\0\u22ce\0\156\0\u2305\0\u233c\0\156";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\5\1\10"+
    "\1\3\1\11\3\3\1\12\1\3\1\13\3\3\1\14"+
    "\1\15\1\16\1\17\1\3\1\20\1\21\1\22\1\23"+
    "\1\3\1\24\1\25\1\26\1\3\1\27\1\30\1\31"+
    "\1\3\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\2\3\1\41\1\42\1\43\1\3\1\44\1\3\1\45"+
    "\2\2\70\0\2\3\4\0\36\3\5\0\12\3\2\0"+
    "\1\3\2\0\1\4\62\0\1\46\5\0\1\47\1\50"+
    "\62\0\2\3\4\0\1\3\1\51\34\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\27\3\1\52\6\3"+
    "\5\0\12\3\2\0\1\3\1\0\2\3\4\0\7\3"+
    "\1\53\26\3\5\0\12\3\2\0\1\3\1\0\2\3"+
    "\4\0\13\3\1\54\17\3\1\55\2\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\3\3\1\56\1\3"+
    "\1\57\7\3\1\60\11\3\1\61\6\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\5\3\1\62\30\3"+
    "\5\0\12\3\2\0\1\3\1\0\2\3\4\0\36\3"+
    "\5\0\1\63\1\3\1\64\7\3\2\0\1\3\1\0"+
    "\2\3\4\0\15\3\1\65\20\3\5\0\12\3\2\0"+
    "\1\3\1\0\2\3\4\0\11\3\1\66\1\3\1\67"+
    "\6\3\1\70\10\3\1\71\2\3\5\0\12\3\2\0"+
    "\1\3\1\0\2\3\4\0\13\3\1\62\22\3\5\0"+
    "\12\3\2\0\1\3\1\0\2\3\4\0\36\3\5\0"+
    "\1\3\1\72\1\3\1\73\6\3\2\0\1\3\1\0"+
    "\2\3\4\0\22\3\1\74\13\3\5\0\12\3\2\0"+
    "\1\3\1\0\2\3\4\0\27\3\1\75\6\3\5\0"+
    "\12\3\2\0\1\3\1\0\2\3\4\0\1\3\1\76"+
    "\34\3\5\0\12\3\2\0\1\3\1\0\2\3\4\0"+
    "\5\3\1\77\30\3\5\0\12\3\2\0\1\3\1\0"+
    "\2\3\4\0\33\3\1\100\2\3\5\0\12\3\2\0"+
    "\1\3\1\0\2\3\4\0\7\3\1\101\26\3\5\0"+
    "\12\3\2\0\1\3\1\0\2\3\4\0\13\3\1\102"+
    "\22\3\5\0\12\3\2\0\1\3\1\0\2\3\4\0"+
    "\3\3\1\103\25\3\1\104\4\3\5\0\12\3\2\0"+
    "\1\3\1\0\2\3\4\0\11\3\1\105\23\3\1\106"+
    "\5\0\12\3\2\0\1\3\1\0\2\3\4\0\31\3"+
    "\1\107\4\3\5\0\12\3\2\0\1\3\1\0\2\3"+
    "\4\0\35\3\1\110\5\0\12\3\2\0\1\3\1\0"+
    "\2\3\4\0\5\3\1\111\30\3\5\0\12\3\2\0"+
    "\1\3\1\0\2\3\4\0\13\3\1\112\17\3\1\113"+
    "\2\3\5\0\12\3\2\0\1\3\6\114\1\0\55\114"+
    "\1\115\2\114\2\0\1\116\64\0\6\47\1\0\60\47"+
    "\5\50\1\117\61\50\1\0\2\3\4\0\2\3\1\120"+
    "\33\3\5\0\1\121\11\3\2\0\1\3\1\0\2\3"+
    "\4\0\17\3\1\122\16\3\5\0\12\3\2\0\1\3"+
    "\1\0\2\3\4\0\10\3\1\123\25\3\5\0\1\3"+
    "\1\124\10\3\2\0\1\3\1\0\2\3\4\0\23\3"+
    "\1\125\12\3\5\0\12\3\2\0\1\3\1\0\2\3"+
    "\4\0\24\3\1\126\11\3\5\0\12\3\2\0\1\3"+
    "\1\0\2\3\4\0\20\3\1\127\15\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\15\3\1\130\20\3"+
    "\5\0\12\3\2\0\1\3\1\0\2\3\4\0\16\3"+
    "\1\131\17\3\5\0\12\3\2\0\1\3\1\0\2\3"+
    "\4\0\2\3\1\132\33\3\5\0\12\3\2\0\1\3"+
    "\1\0\2\3\4\0\3\3\1\133\32\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\14\3\1\134\21\3"+
    "\5\0\12\3\2\0\1\3\1\0\2\3\4\0\15\3"+
    "\1\135\20\3\5\0\12\3\2\0\1\3\1\0\2\3"+
    "\4\0\25\3\1\136\10\3\5\0\12\3\2\0\1\3"+
    "\1\0\2\3\4\0\22\3\1\137\13\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\23\3\1\140\12\3"+
    "\5\0\12\3\2\0\1\3\1\0\2\3\4\0\10\3"+
    "\1\141\25\3\5\0\12\3\2\0\1\3\1\0\2\3"+
    "\4\0\11\3\1\133\24\3\5\0\12\3\2\0\1\3"+
    "\1\0\2\3\4\0\21\3\1\142\14\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\22\3\1\143\13\3"+
    "\5\0\12\3\2\0\1\3\1\0\2\3\4\0\5\3"+
    "\1\144\12\3\1\145\15\3\5\0\12\3\2\0\1\3"+
    "\1\0\2\3\4\0\14\3\1\146\21\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\3\3\1\147\32\3"+
    "\5\0\12\3\2\0\1\3\1\0\2\3\4\0\13\3"+
    "\1\150\11\3\1\151\10\3\5\0\12\3\2\0\1\3"+
    "\1\0\2\3\4\0\21\3\1\146\14\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\11\3\1\152\24\3"+
    "\5\0\12\3\2\0\1\3\1\0\2\3\4\0\2\3"+
    "\1\153\15\3\1\154\15\3\5\0\12\3\2\0\1\3"+
    "\1\0\2\3\4\0\15\3\1\155\20\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\10\3\1\153\14\3"+
    "\1\156\10\3\5\0\12\3\2\0\1\3\1\0\2\3"+
    "\4\0\22\3\1\157\13\3\5\0\12\3\2\0\1\3"+
    "\1\0\2\3\4\0\3\3\1\160\32\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\11\3\1\161\24\3"+
    "\5\0\12\3\2\0\1\3\1\0\2\3\4\0\15\3"+
    "\1\162\20\3\5\0\12\3\2\0\1\3\1\0\2\3"+
    "\4\0\22\3\1\163\13\3\5\0\12\3\2\0\1\3"+
    "\1\0\2\3\4\0\25\3\1\164\10\3\5\0\12\3"+
    "\2\0\1\3\4\50\1\5\1\117\61\50\1\0\2\3"+
    "\4\0\3\3\1\165\11\3\1\166\20\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\3\3\1\167\32\3"+
    "\5\0\12\3\2\0\1\3\1\0\2\3\4\0\20\3"+
    "\1\170\15\3\5\0\12\3\2\0\1\3\1\0\2\3"+
    "\4\0\11\3\1\171\10\3\1\166\13\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\11\3\1\172\24\3"+
    "\5\0\12\3\2\0\1\3\1\0\2\3\4\0\11\3"+
    "\1\173\24\3\5\0\12\3\2\0\1\3\1\0\2\3"+
    "\4\0\25\3\1\174\10\3\5\0\12\3\2\0\1\3"+
    "\1\0\2\3\4\0\3\3\1\175\32\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\36\3\5\0\2\3"+
    "\1\176\7\3\2\0\1\3\1\0\2\3\4\0\17\3"+
    "\1\177\16\3\5\0\12\3\2\0\1\3\1\0\2\3"+
    "\4\0\27\3\1\200\6\3\5\0\12\3\2\0\1\3"+
    "\1\0\2\3\4\0\27\3\1\201\6\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\20\3\1\202\15\3"+
    "\5\0\12\3\2\0\1\3\1\0\2\3\4\0\11\3"+
    "\1\203\24\3\5\0\12\3\2\0\1\3\1\0\2\3"+
    "\4\0\36\3\5\0\3\3\1\176\6\3\2\0\1\3"+
    "\1\0\2\3\4\0\24\3\1\204\11\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\33\3\1\205\2\3"+
    "\5\0\12\3\2\0\1\3\1\0\2\3\4\0\33\3"+
    "\1\206\2\3\5\0\12\3\2\0\1\3\1\0\2\3"+
    "\4\0\25\3\1\207\10\3\5\0\12\3\2\0\1\3"+
    "\1\0\2\3\4\0\30\3\1\210\5\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\16\3\1\211\17\3"+
    "\5\0\12\3\2\0\1\3\1\0\2\3\4\0\27\3"+
    "\1\212\6\3\5\0\12\3\2\0\1\3\1\0\2\3"+
    "\4\0\34\3\1\213\1\3\5\0\12\3\2\0\1\3"+
    "\1\0\2\3\4\0\23\3\1\214\12\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\33\3\1\215\2\3"+
    "\5\0\12\3\2\0\1\3\1\0\2\3\4\0\3\3"+
    "\1\216\32\3\5\0\12\3\2\0\1\3\1\0\2\3"+
    "\4\0\36\3\5\0\4\3\1\217\5\3\2\0\1\3"+
    "\1\0\2\3\4\0\11\3\1\220\24\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\36\3\5\0\5\3"+
    "\1\217\4\3\2\0\1\3\1\0\2\3\4\0\5\3"+
    "\1\221\30\3\5\0\12\3\2\0\1\3\1\0\2\3"+
    "\4\0\13\3\1\222\22\3\5\0\12\3\2\0\1\3"+
    "\1\0\2\3\4\0\36\3\5\0\7\3\1\223\2\3"+
    "\2\0\1\3\1\0\2\3\4\0\36\3\5\0\11\3"+
    "\1\223\2\0\1\3\1\0\2\3\4\0\36\3\5\0"+
    "\1\3\1\224\10\3\2\0\1\3\1\0\2\3\4\0"+
    "\4\3\1\225\31\3\5\0\12\3\2\0\1\3\1\0"+
    "\2\3\4\0\5\3\1\226\30\3\5\0\12\3\2\0"+
    "\1\3\1\0\2\3\4\0\3\3\1\227\32\3\5\0"+
    "\12\3\2\0\1\3\1\0\2\3\4\0\12\3\1\230"+
    "\23\3\5\0\12\3\2\0\1\3\1\0\2\3\4\0"+
    "\13\3\1\231\22\3\5\0\12\3\2\0\1\3\1\0"+
    "\2\3\4\0\11\3\1\232\24\3\5\0\12\3\2\0"+
    "\1\3\1\0\2\3\4\0\2\3\1\233\33\3\5\0"+
    "\12\3\2\0\1\3\1\0\2\3\4\0\20\3\1\234"+
    "\15\3\5\0\12\3\2\0\1\3\1\0\2\3\4\0"+
    "\17\3\1\235\16\3\5\0\12\3\2\0\1\3\1\0"+
    "\2\3\4\0\2\3\1\236\33\3\5\0\12\3\2\0"+
    "\1\3\1\0\2\3\4\0\3\3\1\237\32\3\5\0"+
    "\12\3\2\0\1\3\1\0\2\3\4\0\10\3\1\240"+
    "\25\3\5\0\12\3\2\0\1\3\1\0\2\3\4\0"+
    "\25\3\1\241\10\3\5\0\12\3\2\0\1\3\1\0"+
    "\2\3\4\0\24\3\1\242\11\3\5\0\12\3\2\0"+
    "\1\3\1\0\2\3\4\0\10\3\1\243\25\3\5\0"+
    "\12\3\2\0\1\3\1\0\2\3\4\0\11\3\1\244"+
    "\24\3\5\0\12\3\2\0\1\3\1\0\2\3\4\0"+
    "\31\3\1\245\4\3\5\0\12\3\2\0\1\3\1\0"+
    "\2\3\4\0\3\3\1\246\32\3\5\0\12\3\2\0"+
    "\1\3\1\0\2\3\4\0\2\3\1\247\33\3\5\0"+
    "\12\3\2\0\1\3\1\0\2\3\4\0\35\3\1\250"+
    "\5\0\12\3\2\0\1\3\1\0\2\3\4\0\11\3"+
    "\1\251\24\3\5\0\12\3\2\0\1\3\1\0\2\3"+
    "\4\0\10\3\1\252\25\3\5\0\12\3\2\0\1\3"+
    "\1\0\2\3\4\0\30\3\1\253\5\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\34\3\1\254\1\3"+
    "\5\0\12\3\2\0\1\3\1\0\2\3\4\0\3\3"+
    "\1\255\32\3\5\0\12\3\2\0\1\3\1\0\2\3"+
    "\4\0\11\3\1\255\24\3\5\0\12\3\2\0\1\3"+
    "\1\0\2\3\4\0\11\3\1\256\24\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\3\3\1\257\32\3"+
    "\5\0\12\3\2\0\1\3\1\0\2\3\4\0\2\3"+
    "\1\260\33\3\5\0\12\3\2\0\1\3\1\0\2\3"+
    "\4\0\36\3\5\0\1\261\11\3\2\0\1\3\1\0"+
    "\2\3\4\0\11\3\1\262\24\3\5\0\12\3\2\0"+
    "\1\3\1\0\2\3\4\0\10\3\1\260\25\3\5\0"+
    "\12\3\2\0\1\3\1\0\2\3\4\0\36\3\5\0"+
    "\1\3\1\261\10\3\2\0\1\3\1\0\2\3\4\0"+
    "\3\3\1\263\32\3\5\0\12\3\2\0\1\3\1\0"+
    "\2\3\4\0\3\3\1\264\32\3\5\0\12\3\2\0"+
    "\1\3\1\0\2\3\4\0\27\3\1\265\6\3\5\0"+
    "\12\3\2\0\1\3\1\0\2\3\4\0\3\3\1\266"+
    "\32\3\5\0\12\3\2\0\1\3\1\0\2\3\4\0"+
    "\27\3\1\267\6\3\5\0\12\3\2\0\1\3\1\0"+
    "\2\3\4\0\11\3\1\263\24\3\5\0\12\3\2\0"+
    "\1\3\1\0\2\3\4\0\11\3\1\264\24\3\5\0"+
    "\12\3\2\0\1\3\1\0\2\3\4\0\33\3\1\270"+
    "\2\3\5\0\12\3\2\0\1\3\1\0\2\3\4\0"+
    "\11\3\1\266\24\3\5\0\12\3\2\0\1\3\1\0"+
    "\2\3\4\0\33\3\1\271\2\3\5\0\12\3\2\0"+
    "\1\3\1\0\2\3\4\0\27\3\1\272\6\3\5\0"+
    "\12\3\2\0\1\3\1\0\2\3\4\0\36\3\5\0"+
    "\1\273\11\3\2\0\1\3\1\0\2\3\4\0\3\3"+
    "\1\274\32\3\5\0\12\3\2\0\1\3\1\0\2\3"+
    "\4\0\33\3\1\275\2\3\5\0\12\3\2\0\1\3"+
    "\1\0\2\3\4\0\36\3\5\0\1\3\1\273\10\3"+
    "\2\0\1\3\1\0\2\3\4\0\11\3\1\274\24\3"+
    "\5\0\12\3\2\0\1\3\1\0\2\3\4\0\2\3"+
    "\1\276\33\3\5\0\12\3\2\0\1\3\1\0\2\3"+
    "\4\0\10\3\1\276\25\3\5\0\12\3\2\0\1\3"+
    "\1\0\2\3\4\0\5\3\1\277\30\3\5\0\12\3"+
    "\2\0\1\3\1\0\2\3\4\0\13\3\1\277\22\3"+
    "\5\0\12\3\2\0\1\3\1\0\2\3\4\0\36\3"+
    "\5\0\1\300\11\3\2\0\1\3\1\0\2\3\4\0"+
    "\1\3\1\301\34\3\5\0\12\3\2\0\1\3\1\0"+
    "\2\3\4\0\36\3\5\0\1\3\1\302\10\3\2\0"+
    "\1\3\1\0\2\3\4\0\7\3\1\301\26\3\5\0"+
    "\12\3\2\0\1\3\1\0\2\3\4\0\5\3\1\303"+
    "\30\3\5\0\12\3\2\0\1\3\1\0\2\3\4\0"+
    "\13\3\1\303\22\3\5\0\12\3\2\0\1\3\1\0"+
    "\2\3\4\0\3\3\1\304\32\3\5\0\12\3\2\0"+
    "\1\3\1\0\2\3\4\0\11\3\1\305\24\3\5\0"+
    "\12\3\2\0\1\3\1\0\2\3\4\0\36\3\5\0"+
    "\1\306\11\3\2\0\1\3\1\0\2\3\4\0\36\3"+
    "\5\0\1\3\1\306\10\3\2\0\1\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9075];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\1\11\22\1\5\11"+
    "\7\1\1\0\1\1\1\0\43\1\1\0\1\11\1\1"+
    "\1\0\167\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /** Variable encargada de guardar errores léxicos */
    public Mistake e;
    
    /**
        * Constructor de clase Lexico.
        *
        * @param    in  lectura de entrada.
        * @param    e   errores encontrados por el compilador.    
    */    
    public Lexico(java.io.Reader in, Mistake e)
    {
        this.e = e;
        this.zzReader = in;
    }
    
    /**
        * Crea un nuevo token no terminal encontrado.
        *
        * @param    type    código del token aceptado por LeMa.
        * @return   nuevo   <tt>Symbol</tt> creado para almacenar al token
    */
    private Symbol symbol(int type)
    {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /**
        * Crea un nuevo token terminal encontrado.
        *
        * @param    type    código del token aceptado por LeMa.
        * @param    value   estructura que almacena tokens terminales.
        * @return   nuevo   <tt>Symbol</tt> creado para almacenar al token.
    */
    private Symbol symbol(int type, Object value)
    {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 21: 
          { return symbol(sym.from);
          }
        case 38: break;
        case 36: 
          { return symbol(sym.database);
          }
        case 39: break;
        case 11: 
          { return symbol(sym.or);
          }
        case 40: break;
        case 3: 
          { return symbol(sym.numero,     (new Nodo(sym.numero, yytext(), yyline, yycolumn, null, true)));
          }
        case 41: break;
        case 22: 
          { return symbol(sym.table);
          }
        case 42: break;
        case 27: 
          { return symbol(sym.delete);
          }
        case 43: break;
        case 5: 
          { return symbol(sym.all);
          }
        case 44: break;
        case 24: 
          { return symbol(sym.fa,         (new Nodo(sym.fa, yytext(), yyline, yycolumn, null, true)) );
          }
        case 45: break;
        case 20: 
          { return symbol(sym.show);
          }
        case 46: break;
        case 10: 
          { return symbol(sym.fin);
          }
        case 47: break;
        case 6: 
          { return symbol(sym.par_ab);
          }
        case 48: break;
        case 14: 
          { return symbol(sym.use);
          }
        case 49: break;
        case 23: 
          { return symbol(sym.where);
          }
        case 50: break;
        case 30: 
          { return symbol(sym.values);
          }
        case 51: break;
        case 16: 
          { return symbol(sym.set);
          }
        case 52: break;
        case 17: 
          { return symbol(sym.into);
          }
        case 53: break;
        case 29: 
          { return symbol(sym.update);
          }
        case 54: break;
        case 26: 
          { return symbol(sym.tables);
          }
        case 55: break;
        case 31: 
          { return symbol(sym.create);
          }
        case 56: break;
        case 25: 
          { return symbol(sym.insert);
          }
        case 57: break;
        case 32: 
          { return symbol(sym.select);
          }
        case 58: break;
        case 18: 
          { return symbol(sym.tr,         (new Nodo(sym.tr, yytext(), yyline, yycolumn, null, true)) );
          }
        case 59: break;
        case 19: 
          { return symbol(sym.drop);
          }
        case 60: break;
        case 28: 
          { return symbol(sym.real,       (new Nodo(sym.real, yytext(), yyline, yycolumn, null, true)));
          }
        case 61: break;
        case 35: 
          { return symbol(sym.varchar,    (new Nodo(sym.varchar, yytext(), yyline, yycolumn, null, true)));
          }
        case 62: break;
        case 9: 
          { return symbol(sym.igual);
          }
        case 63: break;
        case 34: 
          { return symbol(sym.bool,       (new Nodo(sym.bool, yytext(), yyline, yycolumn, null, true)));
          }
        case 64: break;
        case 1: 
          { String[] datos = {yytext(),
                                                    String.valueOf(yyline + 1),
                                                    String.valueOf(yycolumn)};
                                  e.insertarError(0, 0, datos);
          }
        case 65: break;
        case 13: 
          { return symbol(sym.numreal,    (new Nodo(sym.numreal, yytext(), yyline, yycolumn, null, true)));
          }
        case 66: break;
        case 7: 
          { return symbol(sym.par_ce);
          }
        case 67: break;
        case 37: 
          { return symbol(sym.databases);
          }
        case 68: break;
        case 8: 
          { return symbol(sym.coma);
          }
        case 69: break;
        case 12: 
          { return symbol(sym.cadena,     (new Nodo(sym.cadena, yytext(), yyline, yycolumn, null, true)));
          }
        case 70: break;
        case 15: 
          { return symbol(sym.and);
          }
        case 71: break;
        case 33: 
          { return symbol(sym.integer,    (new Nodo(sym.integer, yytext(), yyline, yycolumn, null, true)));
          }
        case 72: break;
        case 2: 
          { return symbol(sym.id,         (new Nodo(sym.id, yytext(), yyline, yycolumn, null, true)) );
          }
        case 73: break;
        case 4: 
          { 
          }
        case 74: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
