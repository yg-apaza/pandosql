package sgbd.sintactico;

import java.util.ArrayList;
import sgbd.lexico.sym;
import sgbd.Mistake;

parser code
{:
    /** Variable encargada de guardar errores sintácticos */
    public Mistake e;

    /**
        * Constructor de clase parser.
        *
        * @param    s  analizador léxico.
        * @param    e  errores encontrados por el compilador.    
    */    
    public parser(java_cup.runtime.Scanner s, Mistake e) 
    {
        super(s); 
        this.e = e;
    }
    
    /**
        * Función que almacena en el atributo e los errores sintácticos.
        *
        * @param    message mensaje de error sintáctico.
        * @param    info    token del error sintáctico.    
    */ 
    public void report_error(String message, Object info)
    {   
        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol)
        {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0)
                if (s.right >= 0)
                    e.insertarError(1, 0, (new String[]{message, String.valueOf(s.left + 1), String.valueOf(s.right)}));
        }
    }

    /**
        * Función que se ejecuta cuando ocurre un error sintáctico.
        *
        * @param    message mensaje de error sintáctico.
        * @param    info    token del error sintáctico.   
        * @see void report_error(String, Object)
    */ 
    public void report_fatal_error(String message, Object info)
    {
        report_error(message, info);
    }
:};

/* DECLARACION DE TERMINALES */

terminal create, drop, show, use,

database, databases, id,
table, tables,

insert, delete, update, select, set,
into, from, where, 
 
integer, varchar, real, bool,
all, fin, par_ab, par_ce, igual, coma,

values,

numero, numreal, cadena, tr, fa
;


/* DECLARACION DE NO TERMINALES */

non terminal PROGRAMA, CREACIONBD, 
			ELIMINACIONBD,
			MOSTRARBD,
			USARBD,
			CREARTABLA,
			ELIMINARTABLA,
			MOSTRARTABLA,
			INSERTARREGISTRO,
			ELIMINARREGISTRO,
			MODIFICARREGISTRO,
			MOSTRARREGISTRO,
			ARGUMENTO, ARG, IDS,
			PARAMETRO, PAR,
                        SENTENCIA, 
			TIPO, VALUE;

precedence nonassoc create;
precedence nonassoc drop;
precedence nonassoc show;
precedence nonassoc use;
precedence nonassoc database;
precedence nonassoc databases;
precedence nonassoc id;
precedence nonassoc table;
precedence nonassoc tables;
precedence nonassoc insert;
precedence nonassoc delete;
precedence nonassoc update;
precedence nonassoc select;
precedence nonassoc set;
precedence nonassoc into;
precedence nonassoc from;
precedence nonassoc where;
precedence nonassoc integer;
precedence nonassoc varchar;
precedence nonassoc real;
precedence nonassoc bool;
precedence nonassoc all;
precedence nonassoc fin;
precedence nonassoc par_ab;
precedence nonassoc par_ce;
precedence nonassoc igual;
precedence nonassoc coma;
precedence nonassoc values;


/* PRECEDENCIA */
  
start with PROGRAMA;

PROGRAMA ::= SENTENCIA;

SENTENCIA  ::= CREACIONBD
			|ELIMINACIONBD
			|MOSTRARBD
			|USARBD
			|CREARTABLA
			|ELIMINARTABLA
			|MOSTRARTABLA
			|INSERTARREGISTRO
			|ELIMINARREGISTRO
			|MODIFICARREGISTRO
			|MOSTRARREGISTRO
			|SENTENCIA SENTENCIA;

			
CREACIONBD ::= create database id fin;
ELIMINACIONBD ::= drop database id fin;
MOSTRARBD ::= show databases fin;
USARBD ::= use database id fin;

CREARTABLA ::= create table id PARAMETRO fin;
ELIMINARTABLA ::= drop table id fin;
MOSTRARTABLA ::= show tables fin;


INSERTARREGISTRO ::= insert into id values ARGUMENTO fin;
ELIMINARREGISTRO ::= delete from id fin
			| delete from id where id igual VALUE fin;
MODIFICARREGISTRO ::= update id set id igual VALUE fin
			| update id set id igual VALUE where id igual VALUE fin;
MOSTRARREGISTRO ::= select IDS from id fin
			| select all from id fin 
                        | select IDS from id where id igual VALUE fin
			| select all from id where id igual VALUE fin;
			
			
ARGUMENTO ::=  par_ab ARG par_ce;

ARG ::= VALUE
	|VALUE coma ARG;

IDS ::= id
	|id coma IDS;
	
PARAMETRO ::= par_ab PAR par_ce;
PAR ::= id TIPO
	|id TIPO coma PAR;
	
			
VALUE ::= numero
			|numreal
			|cadena
			|tr
			|fa;			

TIPO ::= integer
		|varchar
		|real
		|bool;

		