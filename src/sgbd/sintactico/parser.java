
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package sgbd.sintactico;

import java.util.ArrayList;
import sgbd.lexico.sym;
import sgbd.Mistake;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\004\000\002\003\006\000\002\004" +
    "\006\000\002\005\005\000\002\006\006\000\002\007\007" +
    "\000\002\010\006\000\002\011\005\000\002\012\010\000" +
    "\002\013\006\000\002\013\012\000\002\014\011\000\002" +
    "\014\015\000\002\015\007\000\002\015\007\000\002\015" +
    "\013\000\002\015\013\000\002\016\005\000\002\017\003" +
    "\000\002\017\005\000\002\020\003\000\002\020\005\000" +
    "\002\021\005\000\002\022\004\000\002\022\006\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\022\004\014\005\012\006\030\007\023\015" +
    "\005\016\025\017\013\020\022\001\002\000\004\002\161" +
    "\001\002\000\004\022\146\001\002\000\024\002\uffff\004" +
    "\uffff\005\uffff\006\uffff\007\uffff\015\uffff\016\uffff\017\uffff" +
    "\020\uffff\001\002\000\024\002\ufffe\004\ufffe\005\ufffe\006" +
    "\ufffe\007\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\001\002" +
    "\000\024\002\000\004\014\005\012\006\030\007\023\015" +
    "\005\016\025\017\013\020\022\001\002\000\024\002\ufff6" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\015\ufff6\016\ufff6\017" +
    "\ufff6\020\ufff6\001\002\000\006\010\140\013\137\001\002" +
    "\000\004\012\124\001\002\000\006\010\103\013\102\001" +
    "\002\000\024\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\015\ufffd\016\ufffd\017\ufffd\020\ufffd\001\002\000\024\002" +
    "\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\015\ufff5\016\ufff5" +
    "\017\ufff5\020\ufff5\001\002\000\024\002\ufffc\004\ufffc\005" +
    "\ufffc\006\ufffc\007\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc" +
    "\001\002\000\024\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\001\002\000\024" +
    "\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\001\002\000\006\012\057\031\056" +
    "\001\002\000\004\010\052\001\002\000\024\002\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\015\ufff7\016\ufff7\017\ufff7" +
    "\020\ufff7\001\002\000\004\023\035\001\002\000\024\002" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\020\ufff8\001\002\000\024\002\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\001\002\000\006\011\032\014\031\001\002\000\004\032" +
    "\034\001\002\000\004\032\033\001\002\000\024\002\ufff1" +
    "\004\ufff1\005\ufff1\006\ufff1\007\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\001\002\000\024\002\uffed\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\015\uffed\016\uffed\017\uffed\020\uffed\001" +
    "\002\000\004\012\036\001\002\000\006\024\037\032\040" +
    "\001\002\000\004\012\041\001\002\000\024\002\uffeb\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\001\002\000\004\035\042\001\002\000\014\040" +
    "\043\041\045\042\044\043\050\044\046\001\002\000\012" +
    "\024\uffdb\032\uffdb\034\uffdb\036\uffdb\001\002\000\012\024" +
    "\uffd9\032\uffd9\034\uffd9\036\uffd9\001\002\000\012\024\uffda" +
    "\032\uffda\034\uffda\036\uffda\001\002\000\012\024\uffd7\032" +
    "\uffd7\034\uffd7\036\uffd7\001\002\000\004\032\051\001\002" +
    "\000\012\024\uffd8\032\uffd8\034\uffd8\036\uffd8\001\002\000" +
    "\024\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\015\uffea" +
    "\016\uffea\017\uffea\020\uffea\001\002\000\004\012\053\001" +
    "\002\000\004\032\054\001\002\000\024\002\ufff0\004\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\001\002\000\004\023\072\001\002\000\004\023\062" +
    "\001\002\000\006\023\uffe0\036\060\001\002\000\004\012" +
    "\057\001\002\000\004\023\uffdf\001\002\000\004\012\063" +
    "\001\002\000\006\024\064\032\065\001\002\000\004\012" +
    "\066\001\002\000\024\002\uffe6\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\001\002\000" +
    "\004\035\067\001\002\000\014\040\043\041\045\042\044" +
    "\043\050\044\046\001\002\000\004\032\071\001\002\000" +
    "\024\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\001\002\000\004\012\073\001" +
    "\002\000\006\024\074\032\075\001\002\000\004\012\076" +
    "\001\002\000\024\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\001\002\000\004" +
    "\035\077\001\002\000\014\040\043\041\045\042\044\043" +
    "\050\044\046\001\002\000\004\032\101\001\002\000\024" +
    "\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\001\002\000\004\012\106\001\002" +
    "\000\004\012\104\001\002\000\004\032\105\001\002\000" +
    "\024\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\001\002\000\004\033\110\001" +
    "\002\000\004\032\123\001\002\000\004\012\112\001\002" +
    "\000\004\034\122\001\002\000\012\025\115\026\114\027" +
    "\117\030\113\001\002\000\006\034\uffd3\036\uffd3\001\002" +
    "\000\006\034\uffd5\036\uffd5\001\002\000\006\034\uffd6\036" +
    "\uffd6\001\002\000\006\034\uffdd\036\120\001\002\000\006" +
    "\034\uffd4\036\uffd4\001\002\000\004\012\112\001\002\000" +
    "\004\034\uffdc\001\002\000\004\032\uffde\001\002\000\024" +
    "\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\015\uffef\016" +
    "\uffef\017\uffef\020\uffef\001\002\000\004\021\125\001\002" +
    "\000\004\012\126\001\002\000\004\035\127\001\002\000" +
    "\014\040\043\041\045\042\044\043\050\044\046\001\002" +
    "\000\006\024\131\032\132\001\002\000\004\012\133\001" +
    "\002\000\024\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\020\uffe9\001\002\000\004\035" +
    "\134\001\002\000\014\040\043\041\045\042\044\043\050" +
    "\044\046\001\002\000\004\032\136\001\002\000\024\002" +
    "\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\001\002\000\004\012\143\001\002\000" +
    "\004\012\141\001\002\000\004\032\142\001\002\000\024" +
    "\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\001\002\000\004\032\144\001\002" +
    "\000\024\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\001\002\000\024\002\ufff4" +
    "\004\014\005\012\006\030\007\023\015\005\016\025\017" +
    "\013\020\022\001\002\000\004\012\147\001\002\000\004" +
    "\037\150\001\002\000\004\033\152\001\002\000\004\032" +
    "\160\001\002\000\014\040\043\041\045\042\044\043\050" +
    "\044\046\001\002\000\006\034\uffe2\036\156\001\002\000" +
    "\004\034\155\001\002\000\004\032\uffe3\001\002\000\014" +
    "\040\043\041\045\042\044\043\050\044\046\001\002\000" +
    "\004\034\uffe1\001\002\000\024\002\uffec\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\015\uffec\016\uffec\017\uffec\020\uffec\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\034\002\003\003\005\004\006\005\014\006" +
    "\016\007\017\010\020\011\026\012\025\013\023\014\010" +
    "\015\015\023\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\005" +
    "\004\006\005\014\006\016\007\017\010\020\011\026\012" +
    "\025\013\023\014\010\015\015\023\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\106\001\001\000\002" +
    "\001\001\000\004\022\110\001\001\000\002\001\001\000" +
    "\004\024\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\005\004\006\005\014\006\016\007\017\010\020\011" +
    "\026\012\025\013\023\014\010\015\015\023\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\150\001" +
    "\001\000\002\001\001\000\006\017\153\025\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\156\025\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /** Variable encargada de guardar errores sintácticos */
    public Mistake e;

    /**
        * Constructor de clase parser.
        *
        * @param    s  analizador léxico.
        * @param    e  errores encontrados por el compilador.    
    */    
    public parser(java_cup.runtime.Scanner s, Mistake e) 
    {
        super(s); 
        this.e = e;
    }
    
    /**
        * Función que almacena en el atributo e los errores sintácticos.
        *
        * @param    message mensaje de error sintáctico.
        * @param    info    token del error sintáctico.    
    */ 
    public void report_error(String message, Object info)
    {   
        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol)
        {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0)
                if (s.right >= 0)
                    e.insertarError(1, 0, (new String[]{message, String.valueOf(s.left + 1), String.valueOf(s.right)}));
        }
    }

    /**
        * Función que se ejecuta cuando ocurre un error sintáctico.
        *
        * @param    message mensaje de error sintáctico.
        * @param    info    token del error sintáctico.   
        * @see void report_error(String, Object)
    */ 
    public void report_fatal_error(String message, Object info)
    {
        report_error(message, info);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= CREACIONBD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= ELIMINACIONBD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= MOSTRARBD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= USARBD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= CREARTABLA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= ELIMINARTABLA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= MOSTRARTABLA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= INSERTARREGISTRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= ELIMINARREGISTRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= MODIFICARREGISTRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= MOSTRARREGISTRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA SENTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CREACIONBD ::= create database id fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CREACIONBD",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ELIMINACIONBD ::= drop database id fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIMINACIONBD",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MOSTRARBD ::= show databases fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOSTRARBD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // USARBD ::= use database id fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("USARBD",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CREARTABLA ::= create table id PARAMETRO fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CREARTABLA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ELIMINARTABLA ::= drop table id fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIMINARTABLA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MOSTRARTABLA ::= show tables fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOSTRARTABLA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSERTARREGISTRO ::= insert into id values ARGUMENTO fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERTARREGISTRO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELIMINARREGISTRO ::= delete from id fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIMINARREGISTRO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELIMINARREGISTRO ::= delete from id where id igual VALUE fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIMINARREGISTRO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MODIFICARREGISTRO ::= update id set id igual VALUE fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODIFICARREGISTRO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MODIFICARREGISTRO ::= update id set id igual VALUE where id igual VALUE fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODIFICARREGISTRO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MOSTRARREGISTRO ::= select IDS from id fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOSTRARREGISTRO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MOSTRARREGISTRO ::= select all from id fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOSTRARREGISTRO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MOSTRARREGISTRO ::= select IDS from id where id igual VALUE fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOSTRARREGISTRO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MOSTRARREGISTRO ::= select all from id where id igual VALUE fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOSTRARREGISTRO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ARGUMENTO ::= par_ab ARG par_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARG ::= VALUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARG ::= VALUE coma ARG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IDS ::= id 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IDS ::= id coma IDS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMETRO ::= par_ab PAR par_ce 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PAR ::= id TIPO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PAR ::= id TIPO coma PAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALUE ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALUE ::= numreal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALUE ::= cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALUE ::= tr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALUE ::= fa 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO ::= integer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO ::= varchar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO ::= real 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO ::= bool 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
