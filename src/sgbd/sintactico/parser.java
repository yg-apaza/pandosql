
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package sgbd.sintactico;

import java.util.ArrayList;
import sgbd.lexico.sym;
import sgbd.semantico.Nodo;
import sgbd.semantico.accion;
import sgbd.Mistake;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\003\000\002\026" +
    "\004\000\002\026\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\003" +
    "\006\000\002\004\006\000\002\005\005\000\002\006\006" +
    "\000\002\007\007\000\002\010\006\000\002\010\006\000" +
    "\002\011\005\000\002\012\010\000\002\013\012\000\002" +
    "\014\011\000\002\014\015\000\002\015\007\000\002\015" +
    "\013\000\002\015\007\000\002\015\013\000\002\016\005" +
    "\000\002\025\003\000\002\025\005\000\002\024\003\000" +
    "\002\024\005\000\002\017\005\000\002\023\004\000\002" +
    "\023\006\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\022\004\014\005\012\006\031\007\024\015" +
    "\005\016\026\017\013\020\022\001\002\000\004\002\162" +
    "\001\002\000\004\022\147\001\002\000\024\002\ufffd\004" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\015\ufffd\016\ufffd\017\ufffd" +
    "\020\ufffd\001\002\000\024\002\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\001\002" +
    "\000\024\002\ufffe\004\014\005\012\006\031\007\024\015" +
    "\005\016\026\017\013\020\022\001\002\000\024\002\ufff4" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\001\002\000\006\010\141\013\140\001\002" +
    "\000\004\012\125\001\002\000\006\010\104\013\103\001" +
    "\002\000\024\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\001\002\000\024\002" +
    "\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\001\002\000\024\002\ufff3\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\001\002\000\024\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\001\002\000\024" +
    "\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\015\ufff8\016" +
    "\ufff8\017\ufff8\020\ufff8\001\002\000\006\012\060\031\057" +
    "\001\002\000\004\002\000\001\002\000\004\010\053\001" +
    "\002\000\024\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\020\ufff5\001\002\000\004\023" +
    "\036\001\002\000\024\002\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\001\002\000" +
    "\024\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\001\002\000\006\011\033\014" +
    "\032\001\002\000\004\032\035\001\002\000\004\032\034" +
    "\001\002\000\024\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\001\002\000\024" +
    "\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\001\002\000\004\012\037\001\002" +
    "\000\006\024\040\032\041\001\002\000\004\012\042\001" +
    "\002\000\024\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\001\002\000\004\035" +
    "\043\001\002\000\014\042\044\043\046\044\045\045\050" +
    "\046\051\001\002\000\012\024\uffda\032\uffda\034\uffda\036" +
    "\uffda\001\002\000\012\024\uffd8\032\uffd8\034\uffd8\036\uffd8" +
    "\001\002\000\012\024\uffd9\032\uffd9\034\uffd9\036\uffd9\001" +
    "\002\000\004\032\052\001\002\000\012\024\uffd7\032\uffd7" +
    "\034\uffd7\036\uffd7\001\002\000\012\024\uffd6\032\uffd6\034" +
    "\uffd6\036\uffd6\001\002\000\024\002\uffe9\004\uffe9\005\uffe9" +
    "\006\uffe9\007\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\001" +
    "\002\000\004\012\054\001\002\000\004\032\055\001\002" +
    "\000\024\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\015" +
    "\uffef\016\uffef\017\uffef\020\uffef\001\002\000\004\023\073" +
    "\001\002\000\004\023\063\001\002\000\006\023\uffdf\036" +
    "\061\001\002\000\004\012\060\001\002\000\004\023\uffde" +
    "\001\002\000\004\012\064\001\002\000\006\024\065\032" +
    "\066\001\002\000\004\012\067\001\002\000\024\002\uffe4" +
    "\004\uffe4\005\uffe4\006\uffe4\007\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\001\002\000\004\035\070\001\002\000\014" +
    "\042\044\043\046\044\045\045\050\046\051\001\002\000" +
    "\004\032\072\001\002\000\024\002\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\001" +
    "\002\000\004\012\074\001\002\000\006\024\075\032\076" +
    "\001\002\000\004\012\077\001\002\000\024\002\uffe6\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\001\002\000\004\035\100\001\002\000\014\042" +
    "\044\043\046\044\045\045\050\046\051\001\002\000\004" +
    "\032\102\001\002\000\024\002\uffe5\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\001\002" +
    "\000\004\012\107\001\002\000\004\012\105\001\002\000" +
    "\004\032\106\001\002\000\024\002\ufff2\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\001" +
    "\002\000\004\033\111\001\002\000\004\032\124\001\002" +
    "\000\004\012\113\001\002\000\004\034\123\001\002\000" +
    "\012\025\115\026\116\027\120\030\114\001\002\000\006" +
    "\034\uffd2\036\uffd2\001\002\000\006\034\uffd5\036\uffd5\001" +
    "\002\000\006\034\uffd4\036\uffd4\001\002\000\006\034\uffdc" +
    "\036\121\001\002\000\006\034\uffd3\036\uffd3\001\002\000" +
    "\004\012\113\001\002\000\004\034\uffdb\001\002\000\004" +
    "\032\uffdd\001\002\000\024\002\uffee\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\015\uffee\016\uffee\017\uffee\020\uffee\001\002" +
    "\000\004\021\126\001\002\000\004\012\127\001\002\000" +
    "\004\035\130\001\002\000\014\042\044\043\046\044\045" +
    "\045\050\046\051\001\002\000\006\024\132\032\133\001" +
    "\002\000\004\012\134\001\002\000\024\002\uffe8\004\uffe8" +
    "\005\uffe8\006\uffe8\007\uffe8\015\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\001\002\000\004\035\135\001\002\000\014\042\044" +
    "\043\046\044\045\045\050\046\051\001\002\000\004\032" +
    "\137\001\002\000\024\002\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\001\002\000" +
    "\004\012\144\001\002\000\004\012\142\001\002\000\004" +
    "\032\143\001\002\000\024\002\ufff1\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\001\002" +
    "\000\004\032\145\001\002\000\024\002\uffed\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\001\002\000\004\002\uffff\001\002\000\004\012\150\001" +
    "\002\000\004\037\151\001\002\000\004\033\153\001\002" +
    "\000\004\032\161\001\002\000\014\042\044\043\046\044" +
    "\045\045\050\046\051\001\002\000\006\034\uffe1\036\157" +
    "\001\002\000\004\034\156\001\002\000\004\032\uffe2\001" +
    "\002\000\014\042\044\043\046\044\045\045\050\046\051" +
    "\001\002\000\004\034\uffe0\001\002\000\024\002\uffea\004" +
    "\uffea\005\uffea\006\uffea\007\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\036\002\003\003\005\004\006\005\014\006" +
    "\015\007\017\010\020\011\027\012\026\013\024\014\010" +
    "\015\016\020\007\026\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\005\004\006\005\014\006\015\007\017\010\020\011" +
    "\027\012\026\013\024\014\010\015\016\020\007\026\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\107\001\001\000\002\001\001\000\004\023" +
    "\111\001\001\000\002\001\001\000\004\021\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\151\001\001\000\002" +
    "\001\001\000\006\022\153\025\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\153" +
    "\025\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo raiz;

    /** Variable encargada de guardar errores sintácticos */
    public Mistake e;

    /**
        * Constructor de clase parser.
        *
        * @param    s  analizador léxico.
        * @param    e  errores encontrados por el compilador.    
    */    
    public parser(java_cup.runtime.Scanner s, Mistake e) 
    {
        super(s); 
        this.e = e;
    }
    
    /**
        * Función que almacena en el atributo e los errores sintácticos.
        *
        * @param    message mensaje de error sintáctico.
        * @param    info    token del error sintáctico.    
    */ 
    public void report_error(String message, Object info)
    {   
        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol)
        {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0)
                if (s.right >= 0)
                    e.insertarError(1, 0, (new String[]{message, String.valueOf(s.left + 1), String.valueOf(s.right)}));
        }
    }

    /**
        * Función que se ejecuta cuando ocurre un error sintáctico.
        *
        * @param    message mensaje de error sintáctico.
        * @param    info    token del error sintáctico.   
        * @see void report_error(String, Object)
    */ 
    public void report_fatal_error(String message, Object info)
    {
        report_error(message, info);
    }

    public Nodo getRaiz()
    {
        return raiz;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= NSENTENCIA 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> s = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Nodo(accion.SENTENCES, accion.acciones[accion.SENTENCES], 0, 0, s, false);
    raiz = RESULT;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NSENTENCIA ::= SENTENCIA NSENTENCIA 
            {
              ArrayList<Nodo> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> n = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    n.add(0, s);

    RESULT = n;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NSENTENCIA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NSENTENCIA ::= SENTENCIA 
            {
              ArrayList<Nodo> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList <Nodo> n = new ArrayList<Nodo>();
    n.add(s);

    RESULT = n;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NSENTENCIA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= CREACIONBD 
            {
              Nodo RESULT =null;
		int crleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int crright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo cr = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = cr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= ELIMINACIONBD 
            {
              Nodo RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo el = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = el;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= MOSTRARBD 
            {
              Nodo RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo mo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = mo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= USARBD 
            {
              Nodo RESULT =null;
		int usleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int usright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo us = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = us;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= CREARTABLA 
            {
              Nodo RESULT =null;
		int crleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int crright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo cr = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = cr;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= ELIMINARTABLA 
            {
              Nodo RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo el = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = el;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= MOSTRARTABLA 
            {
              Nodo RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo mo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = mo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= INSERTARREGISTRO 
            {
              Nodo RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo in = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = in;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= ELIMINARREGISTRO 
            {
              Nodo RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo el = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = el;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= MODIFICARREGISTRO 
            {
              Nodo RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo mo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = mo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= MOSTRARREGISTRO 
            {
              Nodo RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo mo = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = mo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CREACIONBD ::= create database id fin 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList <Nodo> hijos = new ArrayList <>();
    hijos.add(i);

    RESULT = new Nodo(accion.CREATE_DATABASE, accion.acciones[accion.CREATE_DATABASE], ileft, iright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CREACIONBD",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ELIMINACIONBD ::= drop database id fin 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList <Nodo> hijos = new ArrayList <>();
    hijos.add(i);

    RESULT = new Nodo(accion.DROP_DATABASE, accion.acciones[accion.DROP_DATABASE], ileft, iright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIMINACIONBD",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MOSTRARBD ::= show databases fin 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new Nodo(accion.SHOW_DATABASES, accion.acciones[accion.SHOW_DATABASES], dleft, dright, (new ArrayList<Nodo>()), false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOSTRARBD",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // USARBD ::= use database id fin 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList <Nodo> hijos = new ArrayList <>();
    hijos.add(i);

    RESULT = new Nodo(accion.USE_DATABASE, accion.acciones[accion.USE_DATABASE], ileft, iright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("USARBD",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CREARTABLA ::= create table id PARAMETRO fin 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList <Nodo> hijos = new ArrayList <>();
    hijos.add(i);
    hijos.add(p);

    RESULT = new Nodo(accion.CREATE_TABLE, accion.acciones[accion.CREATE_TABLE], ileft, iright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CREARTABLA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ELIMINARTABLA ::= drop table id fin 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList <Nodo> hijos = new ArrayList <>();
    hijos.add(i);

    RESULT = new Nodo(accion.DROP_TABLE, accion.acciones[accion.DROP_TABLE], ileft, iright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIMINARTABLA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ELIMINARTABLA ::= delete from id fin 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList <Nodo> hijos = new ArrayList <>();
    hijos.add(i);

    RESULT = new Nodo(accion.DELETE_TABLE, accion.acciones[accion.DELETE_TABLE], ileft, iright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIMINARTABLA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MOSTRARTABLA ::= show tables fin 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new Nodo(accion.SHOW_TABLES, accion.acciones[accion.SHOW_TABLES], tleft, tright, (new ArrayList<Nodo>()), false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOSTRARTABLA",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSERTARREGISTRO ::= insert into id values ARGUMENTO fin 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList <Nodo> hijos = new ArrayList <>();
    hijos.add(i);
    hijos.add(a);

    RESULT = new Nodo(accion.INSERT_REGISTER, accion.acciones[accion.INSERT_REGISTER], ileft, iright, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSERTARREGISTRO",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELIMINARREGISTRO ::= delete from id where id igual VALUE fin 
            {
              Nodo RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList <Nodo> hijos = new ArrayList <>();
    hijos.add(i1);
    hijos.add(i2);
    hijos.add(v);

    RESULT = new Nodo(accion.DELETE_REGISTER, accion.acciones[accion.DELETE_REGISTER], i1left, i1right, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIMINARREGISTRO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MODIFICARREGISTRO ::= update id set id igual VALUE fin 
            {
              Nodo RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList <Nodo> hijos = new ArrayList <>();
    hijos.add(i1);
    hijos.add(i2);
    hijos.add(v);
    hijos.add(new Nodo(accion.CONDITION, accion.acciones[accion.CONDITION], i1left, i1right, (new ArrayList <Nodo>()), false));
    RESULT = new Nodo(accion.UPDATE_REGISTER, accion.acciones[accion.UPDATE_REGISTER], i1left, i1right, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODIFICARREGISTRO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MODIFICARREGISTRO ::= update id set id igual VALUE where id igual VALUE fin 
            {
              Nodo RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i3 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList <Nodo> vA = new ArrayList <>();
    vA.add(i3);
    vA.add(v2);
    Nodo n = new Nodo(accion.CONDITION, accion.acciones[accion.CONDITION], i1left, i1right, vA, false);

    ArrayList <Nodo> hijos = new ArrayList <>();
    hijos.add(i1);
    hijos.add(i2);
    hijos.add(v1);
    hijos.add(n);

    RESULT = new Nodo(accion.UPDATE_REGISTER, accion.acciones[accion.UPDATE_REGISTER], i1left, i1right, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MODIFICARREGISTRO",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MOSTRARREGISTRO ::= select IDS from id fin 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Nodo> id = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Nodo n = new Nodo(accion.IDENTIFIERS, accion.acciones[accion.IDENTIFIERS], ileft, iright, id, false);
    ArrayList <Nodo> hijos = new ArrayList <>();
    hijos.add(i);
    hijos.add(n);
    
    hijos.add(new Nodo(accion.CONDITION, accion.acciones[accion.CONDITION], ileft, iright, (new ArrayList <Nodo>()), false));

    RESULT = new Nodo(accion.SELECT, accion.acciones[accion.SELECT], 0, 0, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOSTRARREGISTRO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MOSTRARREGISTRO ::= select IDS from id where id igual VALUE fin 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ArrayList<Nodo> id = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList <Nodo> vA = new ArrayList <>();
    vA.add(i2);
    vA.add(v);
    Nodo n = new Nodo(accion.CONDITION, accion.acciones[accion.CONDITION], i2left, i2right, vA, false);
    Nodo i = new Nodo(accion.IDENTIFIERS, accion.acciones[accion.IDENTIFIERS], i1left, i1right, id, false);

    ArrayList <Nodo> hijos = new ArrayList <>();
    hijos.add(i1);
    hijos.add(i);
    hijos.add(n);

    RESULT = new Nodo(accion.SELECT, accion.acciones[accion.SELECT], 0, 0, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOSTRARREGISTRO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MOSTRARREGISTRO ::= select all from id fin 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList <Nodo> hijos = new ArrayList <>();
    hijos.add(i);
    hijos.add(new Nodo(accion.CONDITION, accion.acciones[accion.CONDITION], ileft, iright, (new ArrayList <Nodo>()), false));

    RESULT = new Nodo(accion.SELECT_ALL, accion.acciones[accion.SELECT_ALL], 0,0, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOSTRARREGISTRO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MOSTRARREGISTRO ::= select all from id where id igual VALUE fin 
            {
              Nodo RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Nodo i1 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i2 = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList <Nodo> vA = new ArrayList <>();
    vA.add(i2);
    vA.add(v);
    Nodo n = new Nodo(accion.CONDITION, accion.acciones[accion.CONDITION], i1left, i1right, vA, false);

    ArrayList <Nodo> hijos = new ArrayList <>();
    hijos.add(i1);
    hijos.add(n);

    RESULT = new Nodo(accion.SELECT_ALL, accion.acciones[accion.SELECT_ALL], 0,0, hijos, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOSTRARREGISTRO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARGUMENTO ::= par_ab ARG par_ce 
            {
              Nodo RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> ar = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new Nodo(accion.ARGUMENTS, accion.acciones[accion.ARGUMENTS], 0, 0, ar, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARG ::= VALUE 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList <Nodo> n = new ArrayList <>();
    n.add(v);

    RESULT = n;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARG ::= VALUE coma ARG 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> ar = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ar.add(0, v);

    RESULT = ar;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARG",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IDS ::= id 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList <Nodo> n = new ArrayList <>();
    n.add(i);

    RESULT = n;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IDS ::= id coma IDS 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> id = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    id.add(0, i);

    RESULT = id;    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMETRO ::= par_ab PAR par_ce 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new Nodo(accion.PARAMETERS, accion.acciones[accion.PARAMETERS], 0, 0, p, false);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PAR ::= id TIPO 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList <Nodo> n = new ArrayList <> ();
    n.add(t);
    n.add(i);
    Nodo a = new Nodo(accion.PARAMETER, accion.acciones[accion.PARAMETER], ileft, iright, n, false);
    ArrayList <Nodo> x = new ArrayList <> ();
    x.add(a);
    RESULT = x;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PAR ::= id TIPO coma PAR 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> p = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList <Nodo> hijos = new ArrayList <> ();
    hijos.add(t);
    hijos.add(i);
    Nodo sim = new Nodo(accion.PARAMETER, accion.acciones[accion.PARAMETER], ileft, iright, hijos, false);

    p.add(0, sim);

    RESULT = p;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALUE ::= numero 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo n = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = n;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALUE ::= numreal 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = r;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALUE ::= cadena 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = c;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALUE ::= tr 
            {
              Nodo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = t;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALUE ::= fa 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = f;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO ::= integer 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = i;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO ::= varchar 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = v;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO ::= real 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = r;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO ::= bool 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = b;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
